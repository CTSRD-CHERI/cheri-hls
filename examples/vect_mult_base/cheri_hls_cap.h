// Data Buffer Information
struct ctrl_reg {
  // Address offset
  long offset;
  // Address size
  int size;
  // Buffer size
  int buffer_size;

  // Init
  ctrl_reg(int o, int s, int b) {
    offset = o;
    size = s;
    buffer_size = b;
  }
};

// HLS Kernel Information
struct hls_kernel {
  // Control signals
  int ctrl;
  // Global Interrupt Enable Register
  int gie;
  // IP Interrupt Enable Register (Read/Write)
  int ier;
  // IP Interrupt Status Register (Read/TOW)
  int isr;
  // Data Buffer Count
  int data_size;
  // Data Buffer Information
  ctrl_reg *data;
};

// Example HLS Kernel specific information - automatically generated by LLVM
// PASS void init_xvect_mult(hls_kernel *x) {
//   x->ctrl = 0x00;
//   x->gie = 0x04;
//   x->ier = 0x08;
//   x->isr = 0x0C;
//
//   x->data_size = 3;
//   x->data = malloc((ctrl_reg)*x->data_size);
//   x->data[0] = &ctrl_reg(0x10, 32, 1000);
//   x->data[1] = &ctrl_reg(0x18, 64, 1000);
//   x->data[2] = &ctrl_reg(0x24, 64, 1000);
// }
